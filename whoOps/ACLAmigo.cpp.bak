#include "StdAfx.h"

#include <sstream>
#include <string>
#include <vector>
#include <iterator>

#include <Windows.h>
#include <Aclapi.h>


#include "..\cyclOps\cyclOps.h"
#include "..\cyclOps\StringEmUp.h"

#include "ErroroneousMonk.h"
#include "ExceptionACLAmigo.h"
#include "FileFeeFoFum.h"
#include "ExceptionFileFeeFoFum.h"
#include "ACLAmigo.h"

using cyclOps::StringEmUp;
using std::vector;


whoOps::ACLAmigo::ACLAmigo(void)
{
}


whoOps::ACLAmigo::~ACLAmigo(void)
{
}

void whoOps::ACLAmigo::AddACEToDACL(const string& strPath, const char* szSecurityPrincipal, const DWORD dwPermission) { CYCLOPSDEBUG("strPath = %s", strPath.c_str());
    ACL_SIZE_INFORMATION ACLInfo; 
    memset(&ACLInfo, 0, sizeof(ACL_SIZE_INFORMATION));
    UCHAR   BuffSid[256];
    PSID pSID = (PSID) BuffSid;
    int returnCode = ResolveSID(szSecurityPrincipal, pSID);
	PACL pOldDACL = NULL;
    PSECURITY_DESCRIPTOR pSD = NULL;
    SECURITY_INFORMATION ACLSecInfo = DACL_SECURITY_INFORMATION;
	boolean boSuccesful = true;
	returnCode = GetNamedSecurityInfoA(strPath.c_str(), SE_FILE_OBJECT, ACLSecInfo, NULL, NULL, &pOldDACL, NULL, &pSD);  
	string strReturn;
    if (returnCode != ERROR_SUCCESS) {
		boSuccesful = false;
		ErroroneousMonk error(returnCode);
		strReturn = StringEmUp::format("GetNamedSecurityInfoA returned an error: %s", error.formatMessage().c_str());
	} else {
        BOOL getACLResult = GetAclInformation(pOldDACL, &ACLInfo, sizeof(ACLInfo), AclSizeInformation); 
        if (!getACLResult) {
			boSuccesful = false;
			strReturn = "GetAclInformation() failed.";
		} else {
			DWORD cb = 0;
			DWORD cbExtra = sizeof(ACCESS_ALLOWED_ACE) - sizeof(DWORD) + GetLengthSid(pSID); 
			cb = ACLInfo.AclBytesInUse + cbExtra; 
			PACL pNewDACL = static_cast<PACL>(HeapAlloc(GetProcessHeap(),0,cb)); 
			BOOL initACLResult = InitializeAcl(pNewDACL, cb, ACL_REVISION); 
			if (!initACLResult) {
				boSuccesful = false;
				strReturn = "InitializeAcl() failed.";
			} else {
				for (DWORD i = 0; i < ACLInfo.AceCount; ++i)  { 
					ACE_HEADER * pACE = 0; 
					GetAce(pOldDACL, i, reinterpret_cast<void**>(&pACE)); 
					pACE->AceFlags = CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE;
					pACE->AceType = ACCESS_ALLOWED_ACE_TYPE;
					AddAce(pNewDACL, ACL_REVISION, MAXDWORD, pACE, pACE->AceSize); 
				} 
				BOOL addACEResult = AddAccessAllowedAceEx(pNewDACL, ACL_REVISION, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE, dwPermission, pSID);
				if (!addACEResult) {
					boSuccesful = false;
					strReturn = "AddAccessAllowedAceEx() failed.";
				} else {	CYCLOPSDEBUG("strPath.size = %d", strPath.size());
					size_t iSize = strPath.size() + 10;
					char* pchPath = new char[iSize];
					_snprintf_s(pchPath, iSize - 1, _TRUNCATE, "%s", strPath.c_str()); CYCLOPSDEBUG("pchPath = %s", pchPath);
					DWORD setSIResult = SetNamedSecurityInfoA(pchPath, SEObjType, ACLSecInfo, NULL, NULL, pNewDACL, NULL); 
					if (setSIResult != ERROR_SUCCESS) {
						boSuccesful = false;
						ErroroneousMonk error(setSIResult);
						strReturn = StringEmUp::format("SetNamedSecurityInfoA returned an error: %s", error.formatMessage().c_str());
					} 
					delete[] pchPath;
				}
			}
	        if (pNewDACL) HeapFree(GetProcessHeap(),0, pNewDACL);
		}
        if (pSD) LocalFree(pSD);
    }
	if ( ! boSuccesful) { 
		CYCLOPS_THROW_EXCEPTION_IV(whoOps::ExceptionACLAmigo, "Unable to set permission on %s for %s. %s", 
			strPath.c_str(), szSecurityPrincipal, strReturn.c_str());
	}
}

int whoOps::ACLAmigo::ResolveSID(const char* szSecurityPrinciple, const PSID O_pSID) { CYCLOPSDEBUG("Hello.");
    int returnCode = ERROR_SUCCESS;
    SID_NAME_USE SIDType;
    DWORD SIDSize = 0;
    DWORD buffDomainNameSize = 0;
    const int MAX_BUFF = 256;
    char buffDomainName[MAX_BUFF];

    SIDSize = buffDomainNameSize = MAX_BUFF;

    if (!LookupAccountNameA(NULL, 
                           szSecurityPrinciple, 
                           O_pSID, 
                           &SIDSize, 
                           buffDomainName, 
                           &buffDomainNameSize, 
                           &SIDType))
    {
        returnCode = GetLastError();
    }
    return returnCode;
}

DWORD whoOps::ACLAmigo::_STANDARD_RIGHTS_ALL = STANDARD_RIGHTS_ALL;
DWORD whoOps::ACLAmigo::_FILE_GENERIC_EXECUTE = FILE_GENERIC_EXECUTE;
DWORD whoOps::ACLAmigo::_FILE_GENERIC_READ = FILE_GENERIC_READ;
DWORD whoOps::ACLAmigo::_FILE_GENERIC_WRITE = FILE_GENERIC_WRITE;
DWORD whoOps::ACLAmigo::_DELETE = DELETE;
DWORD whoOps::ACLAmigo::_SPECIFIC_RIGHTS_ALL = SPECIFIC_RIGHTS_ALL;
DWORD whoOps::ACLAmigo::_READ_CONTROL = READ_CONTROL;

DWORD whoOps::ACLAmigo::getPermission(const char* szPermission) { CYCLOPSDEBUG("Hello.");
	if (_stricmp(szPermission, "modify") == 0) {
		return whoOps::ACLAmigo::_FILE_GENERIC_EXECUTE 
			| whoOps::ACLAmigo::_FILE_GENERIC_WRITE 
			| whoOps::ACLAmigo::_FILE_GENERIC_READ 
			| whoOps::ACLAmigo::_DELETE;
	}
	if (_stricmp(szPermission, "read_control") == 0) {
		return whoOps::ACLAmigo::_READ_CONTROL;
	}
	if (_stricmp(szPermission, "full") == 0) {
		return whoOps::ACLAmigo::_STANDARD_RIGHTS_ALL | whoOps::ACLAmigo::_SPECIFIC_RIGHTS_ALL;
	}
	if (_stricmp(szPermission, "standard_rights_all") == 0) {
		return whoOps::ACLAmigo::_STANDARD_RIGHTS_ALL;
	}
	string strError = cyclOps::StringEmUp::format("The permission '%s' is not known to ACLAmigo.", szPermission);
	CYCLOPS_THROW_EXCEPTION_III(whoOps::ExceptionACLAmigo, strError);
}

void whoOps::ACLAmigo::addPermissions(const string& strPath, const char* szSecurityPrincipal, const char* szPermission) { CYCLOPSDEBUG("Hello."); 
	DWORD dwPermission = this->getPermission(szPermission);
	this->addPermissions(strPath, szSecurityPrincipal, dwPermission);
}

void whoOps::ACLAmigo::addPermissions(const string& strPath, const char* szSecurityPrincipal, const DWORD dwPermission) { CYCLOPSDEBUG("Hello.");
	this->AddACEToDACL(strPath, szSecurityPrincipal, dwPermission);
	if (this->isDirectory(strPath)) {
		this->addPermissionsToChildren(strPath, szSecurityPrincipal, dwPermission);
	}
}

bool whoOps::ACLAmigo::isDirectory(const std::string& strPath) { CYCLOPSDEBUG("Hello.");
	DWORD dwFileAttributes = ::GetFileAttributesA(strPath.c_str());
	return (dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) == 1;
}

void whoOps::ACLAmigo::addPermissionsToChildren(const string& strPath, const char* szSecurityPrincipal, const DWORD dwPermission) { CYCLOPSDEBUG("Hello.");
	FileFeeFoFum file(strPath);
	vector<FileFeeFoFum> files = file.listFiles();
	for (std::vector<FileFeeFoFum>::iterator i = files.begin(); i != files.end(); ++i) {
		this->addPermissions(i->getAbsolutePath(), szSecurityPrincipal, dwPermission);		
	}
}
